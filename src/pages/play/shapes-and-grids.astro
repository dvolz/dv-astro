---
import BaseLayout from '../../layouts/BaseLayout.astro'
import BlogDetails from '../../components/BlogDetails.astro'
import { Icon } from 'astro-icon/components'

export const blogData = {
	title: 'Shapes and Grids',
	author: 'David Volz',
	description: `Playing with some shapes and grids.`,
	image: {
		url: 'https://docs.astro.build/assets/arc.webp',
		alt: 'The Astro logo on a dark background with a purple gradient arc.',
	},
	display: true,
	pubDate: '2024-11-22',
	tags: ['css', 'code', 'design', 'fluff'],
	featured: true,
}
const showTypographyHero = true
const theme = 'inverted'
const fullWidthBody = true
import '../../styles/themes/_inverted.scss'
import '../../styles/module/_slider.scss'

// Math
import katex from 'katex'
import 'katex/dist/katex.min.css'

// Define your values and calculations
const w = 60
const smallColumnWidth = 100 - w
const boxWidth = 100 - smallColumnWidth * 2

// Define the math expressions and their corresponding descriptions
const mathExpressions = [
	{ id: 'w', expression: 'w = 60\\%', description: 'Width percentage' },
	{
		id: 'smallColumnWidth',
		expression: 'smallColumnWidth = 100 - w',
		description: 'Small column width',
	},
	{
		id: 'boxWidth',
		expression: 'boxWidth = 100 - (smallColumnWidth \\times 2)',
		description: 'Box width',
	},
]

// Render all math expressions using KaTeX
const renderedMath = mathExpressions.map((item) => ({
	id: item.id,
	html: katex.renderToString(item.expression, { throwOnError: false }),
	description: item.description,
}))
---

<style lang="scss">
	.example-box {
		display: flex;
		flex-flow: row wrap;
		position: relative;
		width: calc(100vw - 4rem);
		margin-left: calc(-50vw + 50%); /* Center align the figure */
		transform: translateX(2rem);
		margin-bottom: 3rem;

		.column {
			flex: 1 1 0px;
			border: 0.1rem solid var(--text-color);
			height: 25vw;
			display: flex;
			justify-content: center;
			align-items: center;
			text-align: center;
			// Top and Bottom
			&:nth-child(1),
			&:nth-child(2) {
				border-bottom: none;
			}

			// Left
			&:nth-child(1),
			&:nth-child(3) {
				border-right: none;
			}

			// 56
			--width-a: 60%;
			&:nth-child(1),
			&:nth-child(4) {
				flex: 0 0 var(--width-a);
			}
			// 44
			--width-b: 40%;
			&:nth-child(2),
			&:nth-child(3) {
				flex: 0 0 var(--width-b);
			}
		}
		.box {
			position: absolute;
			left: 50%;
			top: 50%;
			transform: translate(-50%, -50%);
			width: 20.1%;
			padding-bottom: 20%;
			border: 0.1rem solid var(--text-color);
			background: var(--background-color);
		}
	}
	.result {
		font:
			normal 2rem KaTeX_Main,
			Times New Roman,
			serif;
	}

	// Resize
	.resize-handle {
		width: 3rem;
		height: 3rem;
		background-color: var(--background-color);
		border: 0.1rem solid var(--text-color);
		position: absolute;
		top: 0;
		right: 0;
		cursor: col-resize;
		display: flex;
		justify-content: center;
		align-items: center;
	}
</style>

<script>
	const resizeHandle = document.querySelector('.resize-handle')
	const resizableBox = document.querySelector('.example-box')
	const body = document.body

	let isResizing = false

	// Add both mouse and touch event listeners
	resizeHandle.addEventListener('mousedown', startResize)
	resizeHandle.addEventListener('touchstart', startResize, { passive: false })

	function startResize(e) {
		e.preventDefault() // Prevent default touch actions on mobile
		isResizing = true

		// Add mouse and touch move/up listeners to the document
		document.addEventListener('mousemove', onMouseMove)
		document.addEventListener('mouseup', onMouseUp)
		document.addEventListener('touchmove', onTouchMove, { passive: false })
		document.addEventListener('touchend', onMouseUp)
	}

	function onMouseMove(e) {
		handleResize(e.clientX)
	}

	function onTouchMove(e) {
		// Use the first touch point for resizing
		const touch = e.touches[0]
		handleResize(touch.clientX)
	}

	function handleResize(clientX) {
		if (isResizing) {
			// Calculate the new width
			const width = clientX - resizableBox.offsetLeft

			// Prevent the box from exceeding the viewport width
			const maxWidth = body.clientWidth
			if (width <= maxWidth && width >= 100) {
				// Ensure a minimum width
				resizableBox.style.width = `${width}px`
			}
		}
	}

	function onMouseUp() {
		if (isResizing) {
			isResizing = false

			// Clean up event listeners
			document.removeEventListener('mousemove', onMouseMove)
			document.removeEventListener('mouseup', onMouseUp)
			document.removeEventListener('touchmove', onTouchMove)
			document.removeEventListener('touchend', onMouseUp)
		}
	}
</script>
<BaseLayout
	pageTitle={blogData.title}
	{showTypographyHero}
	description={blogData.description}
	theme={theme}
	fullWidthBody={fullWidthBody}
	display={blogData.display}>
	<div class="details-width">
		<BlogDetails {...blogData} />
	</div>
	<div class="article">
		<h3>The Design</h3>
		<p>
			A couple years back I was working on building a site that had a layout
			that stuck in my mind after completing it. It had two rows. Both rows had
			two columns with about a 3/5 width and a 2/5 width. The first row had the
			big column on the left and then the second row had the big column on the
			right. You can see it below.
		</p>
		<p>
			The design also featured a centered box that dynamically aligned with the
			inner edges of the columns, maintaining its proportions as the screen size
			changed. At the time I just played with the percentages until everything
			lined up. I was pleased to see that as I resized the screen everything
			lined up.
		</p>
		<p class="instruction">
			Click and drag the resize handle to see how the columns and box adjust.
		</p>

		<div class="row example-box">
			<div class="column example-column"></div>
			<div class="column example-column"></div>
			<div class="column example-column"></div>
			<div class="column example-column"></div>
			<div class="box"></div>
			<div class="resize-handle">
				<Icon
					name="mdi:arrow-split-vertical"
					style="stroke: var(--text-color); stroke-width: .3;"
				/>
			</div>
		</div>
		<h3>The Idea</h3>
		<p>
			I had the idea to make a slider that controls the width of all the
			elements inside. If you change the width of the big column, the rest of
			the widths and proportions would update.
		</p>
		<blockquote>
			I admit this math isn't very complicated. But it's still fun.
		</blockquote>
		<h3>The Math</h3>
		<h5>Big Column Width</h5>
		<div class="math">
			<p set:html={renderedMath.find(({ id }) => id === 'w').html} />
		</div>
		<h5>Small Column Width</h5>
		<div class="math">
			<p
				set:html={renderedMath.find(({ id }) => id === 'smallColumnWidth').html}
			/>
			<p class="result">Result: 40%</p>
		</div>
		<h5>Box Width</h5>
		<div class="math">
			<p set:html={renderedMath.find(({ id }) => id === 'boxWidth').html} />
			<p class="result">Result: 20%</p>
		</div>
		<p>
			After calculating the proportions, I implemented a slider that updates the
			values in real-time as you adjust it, allowing for an interactive
			demonstration of the layout.
		</p>
		<p>
			The inner box can get too tall for the container so once the box height is
			taller than the container I change the amount of padding bottom it gets.
			This changes it from a square to a rectangle.
		</p>
		<h3>The Result</h3>
	</div>
	<div class="grid-feature">
		<div class="controls">
			<label>
				<p class="sliderLabel">Box Width</p>
				<p class="sliderValue">
					<span id="boxWidthValue">56.08</span>%
				</p>
				<input
					type="range"
					id="boxWidthSlider"
					min="51"
					max="95"
					value="56.08"
					step="0.01"
				/>
			</label>
		</div>

		<div class="row box-lines">
			<div class="column column-box-lines"></div>
			<div class="column column-box-lines"></div>
			<div class="column column-box-lines"></div>
			<div class="column column-box-lines"></div>
			<div class="box"><div class="box-height"></div></div>
		</div>
	</div>
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const slider = document.querySelector('#boxWidthSlider')
			const boxWidthValue = document.querySelector('#boxWidthValue')

			// Function to calculate the square width
			function getSquareWidth(width) {
				return 100 - (100 - width) * 2
			}

			// Function to update styles based on the slider value
			function updateStyles(e) {
				let value = e?.target?.value || slider?.value
				if (!value) return

				// Round the value to two decimal places
				value = parseFloat(value).toFixed(2)

				boxWidthValue.innerText = value
				const squareWidth = getSquareWidth(value)

				const columns = document.querySelectorAll('.column-box-lines')
				const box = document.querySelector('.box-lines .box')
				const boxHouse = document.querySelector('.box-lines')
				const boxHeightDisplay = document.querySelector('.box-height')

				columns.forEach((column, index) => {
					let width = index === 0 || index === 3 ? value : 100 - value
					column.style.flexBasis = `${width}%`
					column.innerText = `${parseFloat(width).toFixed(2)}%`
				})

				box.style.width = `${squareWidth + 0.1}%`
				box.style.paddingBottom = `${squareWidth}%`
				boxHeightDisplay.innerText = `${parseFloat(squareWidth).toFixed(2)}%`

				const boxHeight = box.offsetHeight
				const boxHouseHeight = boxHouse.offsetHeight
				if (boxHeight > boxHouseHeight) {
					// If the box is taller than the container, adjust padding
					box.style.paddingBottom = `${squareWidth / 2}%`
				}
			}

			// Attach event listener to the slider
			if (slider) {
				slider.addEventListener('input', updateStyles)
				requestAnimationFrame(() => updateStyles({ target: slider }))
			}
			updateStyles() // Initialize styles when DOM content is loaded
		})
	</script>

	<style lang="scss">
		.controls {
			display: flex;
			flex-direction: column;

			padding: 1rem 3rem;
			max-width: 50rem;
			width: 100%;
			margin: 20px auto 0;
			border: 0.1rem solid var(--text-color);
			border-bottom: none;
			label {
				font-size: 1.1rem;
				color: var(--text-color);
				display: flex;
				justify-content: center;
				align-items: center;
				gap: 2rem;
				flex-flow: row wrap;
			}
		}

		.sliderLabel {
			font-size: 1.5rem;
			font-family: var(--a-font);
			flex: 0 0 8rem;
			margin: 0;
		}
		.sliderValue {
			font-weight: bold;
			font-size: 3rem;
			font-family: var(--a-font);
			color: var(--background-color);
			-webkit-text-stroke: 0.1rem var(--text-color);
			text-stroke: 0.1rem var(--text-color);
			display: inline-block;
			min-width: 11rem;
			margin: 0;
		}

		.box-lines {
			display: flex;
			flex-flow: row wrap;
			position: relative;
			.column {
				flex: 1 1 0px;
				border: 0.1rem solid var(--text-color);
				height: 25vw;
				// Top and Bottom
				&:nth-child(1),
				&:nth-child(2) {
					border-bottom: none;
				}

				// Left
				&:nth-child(1),
				&:nth-child(3) {
					border-right: none;
				}

				// 56
				--width-a: 56.08%;
				&:nth-child(1),
				&:nth-child(4) {
					flex: 0 0 var(--width-a);
				}
				// 44
				--width-b: 43.92%;
				&:nth-child(2),
				&:nth-child(3) {
					flex: 0 0 var(--width-b);
				}
			}

			// Square
			.box {
				--box-size: 21.9%;
				position: absolute;
				height: 0;
				width: var(--box-size);
				padding-bottom: var(--box-size);
				border: 0.1rem solid var(--text-color);
				background-color: var(--background-color);
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%);
			}
			.column,
			.box {
				display: flex;
				justify-content: center;
				align-items: center;
				font-size: 4rem;
				font-family: var(--a-font);
				color: var(--background-color);
				-webkit-text-stroke: 0.1rem var(--text-color);
				text-stroke: 0.1rem var(--text-color);
				white-space: nowrap;
				overflow: hidden;
				text-overflow: ellipsis;
			}
			.box-height {
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
			}
		}

		@media screen and (max-width: 768px) {
			#boxWidthSlider {
				flex: 0 0 100%;
			}
		}
	</style>
</BaseLayout>
