---
import BaseLayout from '../../layouts/BaseLayout.astro'
import BlogDetails from '../../components/BlogDetails.astro'
import AstroImage from '../../components/AstroImage.astro'
import sampleImage from '../../assets/images/sample.jpeg' // Import the image from src/assets
export const blogData = {
	title: 'Shapes and Grids',
	author: 'David Volz',
	description: `Playing with some shapes and grids.`,
	image: {
		url: 'https://docs.astro.build/assets/arc.webp',
		alt: 'The Astro logo on a dark background with a purple gradient arc.',
	},
	display: true,
	pubDate: '2024-11-22',
	tags: ['css', 'code', 'design', 'fluff'],
	featured: true,
}
const showTypographyHero = true
const theme = 'inverted'
const fullWidthBody = true
import '../../styles/themes/_inverted.scss'
import '../../styles/module/_slider.scss'
---

<style lang="scss">
	.example-box {
		display: flex;
		flex-flow: row wrap;
		position: relative;
		width: calc(100vw - 4rem);
		margin-left: calc(-50vw + 50%); /* Center align the figure */
		transform: translateX(2rem);
		.column {
			flex: 1 1 0px;
			border: 0.1rem solid var(--text-color);
			height: 25vw;
			// Top and Bottom
			&:nth-child(1),
			&:nth-child(2) {
				border-bottom: none;
			}

			// Left
			&:nth-child(1),
			&:nth-child(3) {
				border-right: none;
			}

			// 56
			--width-a: 56.08%;
			&:nth-child(1),
			&:nth-child(4) {
				flex: 0 0 var(--width-a);
			}
			// 44
			--width-b: 43.92%;
			&:nth-child(2),
			&:nth-child(3) {
				flex: 0 0 var(--width-b);
			}
		}
	}
</style>

<BaseLayout
	pageTitle={blogData.title}
	{showTypographyHero}
	description={blogData.description}
	theme={theme}
	fullWidthBody={fullWidthBody}
	display={blogData.display}>
	<div class="details-width">
		<BlogDetails {...blogData} />
	</div>
	<div class="article">
		<p>
			A couple years back I was working on building a site that had a layout
			that stuck in my mind far after completing it. It had two rows. Both rows
			had two columns with about a 1/3 width and a 2/3 width. The first row had
			the big column on the left and then the second row had the big column on
			the right. You can see it below.
		</p>
		<div class="row example-box">
			<div class="column example-column"></div>
			<div class="column example-column"></div>
			<div class="column example-column"></div>
			<div class="column example-column"></div>
			<div class="example-box"></div>
		</div>
		<!-- p -->
		<div class="tip tip-left">
			<div class="tip-inner">
				<p>
					This is a song by
					<a href="http://levithepoet.net/">Levi The Poet</a>
				</p>
			</div>
		</div>
		<h3>Subheading</h3>
		<!-- h3 -->
		<p>
			Here's some text with an <em>emphasized</em> word and a <strong
				>strong</strong
			> word. (em, strong)
		</p>
		<!-- p -->

		<blockquote>
			<!-- blockquote -->
			"This is a blockquote, typically used for quotes or special attention text."
		</blockquote>

		<p>Here's a list of things:</p>
		<!-- p -->
		<ul>
			<!-- ul -->
			<li>Item one</li>
			<!-- li -->
			<li>Item two</li>
			<!-- li -->
			<li>Item three</li>
			<!-- li -->
		</ul>

		<p>And here's an ordered list:</p>
		<!-- p -->
		<ol>
			<!-- ol -->
			<li>First item</li>
			<!-- li -->
			<li>Second item</li>
			<!-- li -->
			<li>Third item</li>
			<!-- li -->
		</ol>

		<figure>
			<!-- figure -->
			<AstroImage
				src={sampleImage}
				alt="Sample image"
				width="1600"
				height="1200"
			/>
			<!-- img -->
			<figcaption>This is a caption for the image. (figcaption)</figcaption>
		</figure>

		<p>Code example:</p>
		<!-- p -->

		<p>Horizontal rule below:</p>
		<!-- p -->
		<hr />
		<!-- hr -->
	</div>
	<div class="grid-feature">
		<div class="controls">
			<label>
				<p class="sliderLabel">Box Width</p>
				<p class="sliderValue">
					<span id="boxWidthValue">56.08</span>%
				</p>
				<input
					type="range"
					id="boxWidthSlider"
					min="51"
					max="95"
					value="56.08"
					step="0.01"
				/>
			</label>
		</div>

		<div class="row box-lines">
			<div class="column column-box-lines"></div>
			<div class="column column-box-lines"></div>
			<div class="column column-box-lines"></div>
			<div class="column column-box-lines"></div>
			<div class="box"><div class="box-height"></div></div>
		</div>
	</div>
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const slider = document.querySelector('#boxWidthSlider')
			const boxWidthValue = document.querySelector('#boxWidthValue')

			// Function to calculate the square width
			function getSquareWidth(width) {
				return 100 - (100 - width) * 2
			}

			// Function to update styles based on the slider value
			function updateStyles(e) {
				let value = e?.target?.value || slider?.value
				if (!value) return

				// Round the value to two decimal places
				value = parseFloat(value).toFixed(2)

				boxWidthValue.innerText = value
				const squareWidth = getSquareWidth(value)

				const columns = document.querySelectorAll('.column-box-lines')
				const box = document.querySelector('.box-lines .box')
				const boxHouse = document.querySelector('.box-lines')
				const boxHeightDisplay = document.querySelector('.box-height')

				columns.forEach((column, index) => {
					let width = index === 0 || index === 3 ? value : 100 - value
					column.style.flexBasis = `${width}%`
					column.innerText = `${parseFloat(width).toFixed(2)}%`
				})

				box.style.width = `${squareWidth + 0.1}%`
				box.style.paddingBottom = `${squareWidth}%`
				boxHeightDisplay.innerText = `${parseFloat(squareWidth).toFixed(2)}%`

				const boxHeight = box.offsetHeight
				const boxHouseHeight = boxHouse.offsetHeight
				if (boxHeight > boxHouseHeight) {
					// If the box is taller than the container, adjust padding
					box.style.paddingBottom = `${squareWidth / 2}%`
				}
			}

			// Attach event listener to the slider
			if (slider) {
				slider.addEventListener('input', updateStyles)
				requestAnimationFrame(() => updateStyles({ target: slider }))
			}
			updateStyles() // Initialize styles when DOM content is loaded
		})
	</script>

	<style lang="scss">
		.controls {
			display: flex;
			flex-direction: column;

			padding: 1rem 3rem;
			max-width: 50rem;
			width: 100%;
			margin: 20px auto 0;
			border: 0.1rem solid var(--text-color);
			border-bottom: none;
			label {
				font-size: 1.1rem;
				color: var(--text-color);
				display: flex;
				justify-content: center;
				align-items: center;
				gap: 2rem;
				flex-flow: row wrap;
			}
		}

		.sliderLabel {
			font-size: 1.5rem;
			font-family: var(--a-font);
			flex: 0 0 8rem;
			margin: 0;
		}
		.sliderValue {
			font-weight: bold;
			font-size: 3rem;
			font-family: var(--a-font);
			color: var(--background-color);
			-webkit-text-stroke: 0.1rem var(--text-color);
			text-stroke: 0.1rem var(--text-color);
			display: inline-block;
			min-width: 11rem;
			margin: 0;
		}

		.box-lines {
			display: flex;
			flex-flow: row wrap;
			position: relative;
			.column {
				flex: 1 1 0px;
				border: 0.1rem solid var(--text-color);
				height: 25vw;
				// Top and Bottom
				&:nth-child(1),
				&:nth-child(2) {
					border-bottom: none;
				}

				// Left
				&:nth-child(1),
				&:nth-child(3) {
					border-right: none;
				}

				// 56
				--width-a: 56.08%;
				&:nth-child(1),
				&:nth-child(4) {
					flex: 0 0 var(--width-a);
				}
				// 44
				--width-b: 43.92%;
				&:nth-child(2),
				&:nth-child(3) {
					flex: 0 0 var(--width-b);
				}
			}

			// Square
			.box {
				--box-size: 21.9%;
				position: absolute;
				height: 0;
				width: var(--box-size);
				padding-bottom: var(--box-size);
				border: 0.1rem solid var(--text-color);
				background-color: var(--background-color);
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%);
			}
			.column,
			.box {
				display: flex;
				justify-content: center;
				align-items: center;
				font-size: 4rem;
				font-family: var(--a-font);
				color: var(--background-color);
				-webkit-text-stroke: 0.1rem var(--text-color);
				text-stroke: 0.1rem var(--text-color);
				white-space: nowrap;
				overflow: hidden;
				text-overflow: ellipsis;
			}
			.box-height {
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
			}
		}

		@media screen and (max-width: 768px) {
			#boxWidthSlider {
				flex: 0 0 100%;
			}
		}
	</style>
</BaseLayout>
