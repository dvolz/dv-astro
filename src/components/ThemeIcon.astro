---
import { Icon } from 'astro-icon/components'
---

<button id="themeToggle" aria-label="Theme Toggle">
	<svg
		id="Expanded"
		viewBox="0 0 64 64"
		class="sun"
		xmlns="http://www.w3.org/2000/svg">
		<title></title>
		<!-- Circle in the middle -->
		<circle
			class="sun-circle"
			cx="32"
			cy="32"
			r="19.5"
			fill="currentColor"
			stroke-width="1.5"></circle>

		<!-- Sun rays (retain other paths for rays around the circle) -->
		<path d="M32,7.8a1,1,0,0,0,1-1V3.93a1,1,0,1,0-2,0V6.8A1,1,0,0,0,32,7.8Z"
		></path>
		<path
			d="M44.06,11.08a1.06,1.06,0,0,0,.45.11,1,1,0,0,0,.9-.55,27.84,27.84,0,0,1,1.47-2.45,1,1,0,0,0-.31-1.38,1,1,0,0,0-1.38.3,30.23,30.23,0,0,0-1.57,2.63A1,1,0,0,0,44.06,11.08Z"
		></path>
		<path
			d="M53.82,20.32a1,1,0,0,0,.55-.17s.52-.34,2.29-1.31a1,1,0,1,0-1-1.75c-1.84,1-2.38,1.36-2.44,1.39a1,1,0,0,0,.56,1.84Z"
		></path>
		<path d="M60.07,31H57.2a1,1,0,0,0,0,2h2.87a1,1,0,0,0,0-2Z"></path>
		<path
			d="M56.72,45.19c-1.83-1.16-2.34-1.5-2.35-1.51a1,1,0,1,0-1.11,1.67s.51.34,2.38,1.53a1.09,1.09,0,0,0,.54.16,1,1,0,0,0,.54-1.85Z"
		></path>
		<path
			d="M45.35,53.26a1,1,0,1,0-1.67,1.11s.35.52,1.51,2.35a1,1,0,0,0,.85.46.94.94,0,0,0,.53-.16,1,1,0,0,0,.31-1.38C45.69,53.77,45.35,53.26,45.35,53.26Z"
		></path>
		<path d="M32,56.2a1,1,0,0,0-1,1v2.87a1,1,0,0,0,2,0V57.2A1,1,0,0,0,32,56.2Z"
		></path>
		<path
			d="M18.48,53.26c0,.06-.39.6-1.39,2.44a1,1,0,1,0,1.75,1c1-1.77,1.31-2.29,1.31-2.29a1,1,0,0,0-1.67-1.11Z"
		></path>
		<path
			d="M9.74,43.62a30.23,30.23,0,0,0-2.63,1.57A1,1,0,0,0,7.65,47a1.09,1.09,0,0,0,.54-.16c1.76-1.13,2.44-1.47,2.44-1.47a1,1,0,0,0-.89-1.79Z"
		></path>
		<path d="M7.8,32a1,1,0,0,0-1-1H3.93a1,1,0,1,0,0,2H6.8A1,1,0,0,0,7.8,32Z"
		></path>
		<path
			d="M7.17,18.84c1.88,1,2.57,1.37,2.57,1.37a1,1,0,0,0,.89-1.79s-.68-.34-2.5-1.33a1,1,0,1,0-1,1.75Z"
		></path>
		<path
			d="M18.42,10.63a1,1,0,0,0,.9.56,1,1,0,0,0,.89-1.45s-.34-.69-1.37-2.57a1,1,0,1,0-1.75,1C18.08,10,18.42,10.62,18.42,10.63Z"
		></path>
	</svg>

	<Icon
		name="mdi:moon-waning-crescent"
		style="stroke: var(--text-color); stroke-width: .8;"
		class="moon"
	/>
</button>

<style lang="scss">
	#themeToggle {
		border: 0;
		background: none;
		position: relative;
		cursor: pointer;
		transform: translateY(0.8rem);
	}
	$svg-size: 3rem;
	svg {
		transition: all 0.3s ease;
	}
	$svg-size: 3.5rem;
	.sun {
		color: var(--background-color);
		position: absolute;
		top: -0.1rem;
		left: 0;
		opacity: 1;
		width: $svg-size;
		height: $svg-size;
		.sun-circle {
			transition: all 0.3s ease;
			stroke: var(--text-color);
		}

		path {
			transition: all 0.3s ease;
			fill: var(--text-color);
		}
	}

	$svg-size: 3rem;
	.moon {
		color: transparent;
		opacity: 0;
		width: $svg-size;
		height: $svg-size;
		transform: rotate(-8deg);
	}

	:global(.dark) .sun {
		color: transparent;
		opacity: 0;
	}
	:global(.dark) .moon {
		color: var(--background-color);
		opacity: 1;
	}
	#themeToggle:hover {
		.moon {
			color: var(--highlight-accent);
		}
		.sun-circle {
			color: var(--highlight-accent);
		}
	}
</style>

<script is:inline>
	const applyTheme = () => {
		const isDark = localStorage.theme === 'dark'
		const root = document.documentElement
		const body = document.body

		// Update CSS variables for dark and light theme
		if (isDark) {
			// Dark theme values
			body.style.setProperty('--text-color', '#fff7f2')
			body.style.setProperty('--background-color', '#332e2e')
			body.style.setProperty('--link-color', '#c3eeff')
			body.style.setProperty('--link-hover', '#fff')
			root.classList.add('dark')
		} else {
			// Light theme values
			body.style.setProperty('--text-color', '#332e2e')
			body.style.setProperty('--background-color', '#fff7f2')
			body.style.setProperty('--link-color', '#568091')
			body.style.setProperty('--link-hover', '#29435c')
		}
	}

	// Get the theme from localStorage or the system preference
	const theme = (() => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme')
		}
		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			return 'dark'
		}
		return 'light'
	})()

	// Apply the initial theme
	applyTheme()

	// Store the initial theme in localStorage
	window.localStorage.setItem('theme', theme)

	// Toggle theme on button click
	const handleToggleClick = () => {
		const element = document.documentElement
		element.classList.toggle('dark')

		const isDark = element.classList.contains('dark')
		localStorage.setItem('theme', isDark ? 'dark' : 'light')

		// Apply updated theme when toggled
		applyTheme()
	}

	document
		.getElementById('themeToggle')
		.addEventListener('click', handleToggleClick)
</script>
