---
import BlogPost from './BlogPost.astro'
import {
	transformPosts,
	filterPostsByCategory,
	filterFeaturedPosts,
	loadDynamicComponents,
} from '../scripts/postHelpers'

const { featured = 'false', category = 'both' } = Astro.props
const isFeatured = featured === 'true'

// Use Astro.glob to load posts
const mdPlay = await Astro.glob('../pages/play/*.md')
const astroPlay = await Astro.glob('../pages/play/*.astro')
const mdThoughts = await Astro.glob('../pages/thoughts/*.md')
const astroThoughts = await Astro.glob('../pages/thoughts/*.astro')

// Transform posts
const allPosts = [
	...transformPosts(mdThoughts, 'markdown'),
	...transformPosts(astroThoughts, 'astro'),
	...transformPosts(mdPlay, 'markdown'),
	...transformPosts(astroPlay, 'astro'),
]

// Filter posts by category and featured status
const categoryFilteredPosts = filterPostsByCategory(allPosts, category)
const featuredFilteredPosts = filterFeaturedPosts(
	categoryFilteredPosts,
	isFeatured
)

// Dynamically load components for posts with `display: true`
const processedPosts = await loadDynamicComponents(featuredFilteredPosts)

// Sort posts by date (most recent first)
const sortedPosts = processedPosts.sort((a, b) => {
	const dateA = new Date(a.date)
	const dateB = new Date(b.date)
	return dateB - dateA // Sort in descending order
})
import '../styles/global/_recent-items.scss'
---

<ul class="recentItems">
	{
		sortedPosts.length > 0 ? (
			sortedPosts.map((post) => (
				<BlogPost
					url={post.url}
					title={post.title}
					date={post.date}
					display={post.display}
					description={post.description}
					DynamicComponent={post.DynamicComponent}
				/>
			))
		) : (
			<p>No posts</p>
		)
	}
</ul>
